/* 
 * Telstra Messaging API
 *
 *  The Telstra SMS Messaging API allows your applications to send and receive SMS text messages from Australia's leading network operator.  It also allows your application to track the delivery status of both sent and received SMS messages. 
 *
 * OpenAPI spec version: 2.2.4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using com.telstra.messaging.Client;
using com.telstra.messaging.Model;

namespace com.telstra.messaging.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMessagingApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get MMS Status
        /// </summary>
        /// <remarks>
        /// Get MMS Status
        /// </remarks>
        /// <exception cref="com.telstra.messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageid">Unique identifier of a message - it is the value returned from a previous POST call to https://api.telstra.com/v2/messages/mms</param>
        /// <returns>OutboundPollResponse</returns>
        OutboundPollResponse GetMMSStatus (string messageid);

        /// <summary>
        /// Get MMS Status
        /// </summary>
        /// <remarks>
        /// Get MMS Status
        /// </remarks>
        /// <exception cref="com.telstra.messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageid">Unique identifier of a message - it is the value returned from a previous POST call to https://api.telstra.com/v2/messages/mms</param>
        /// <returns>ApiResponse of OutboundPollResponse</returns>
        ApiResponse<OutboundPollResponse> GetMMSStatusWithHttpInfo (string messageid);
        /// <summary>
        /// Get SMS Status
        /// </summary>
        /// <remarks>
        /// Get Message Status
        /// </remarks>
        /// <exception cref="com.telstra.messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Unique identifier of a message - it is the value returned from a previous POST call to https://api.telstra.com/v2/messages/sms</param>
        /// <returns>OutboundPollResponse</returns>
        OutboundPollResponse GetSMSStatus (string messageId);

        /// <summary>
        /// Get SMS Status
        /// </summary>
        /// <remarks>
        /// Get Message Status
        /// </remarks>
        /// <exception cref="com.telstra.messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Unique identifier of a message - it is the value returned from a previous POST call to https://api.telstra.com/v2/messages/sms</param>
        /// <returns>ApiResponse of OutboundPollResponse</returns>
        ApiResponse<OutboundPollResponse> GetSMSStatusWithHttpInfo (string messageId);
        /// <summary>
        /// Retrieve SMS Responses
        /// </summary>
        /// <remarks>
        /// Retrieve Messages
        /// </remarks>
        /// <exception cref="com.telstra.messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;InboundPollResponse&gt;</returns>
        List<InboundPollResponse> RetrieveSMSResponses ();

        /// <summary>
        /// Retrieve SMS Responses
        /// </summary>
        /// <remarks>
        /// Retrieve Messages
        /// </remarks>
        /// <exception cref="com.telstra.messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;InboundPollResponse&gt;</returns>
        ApiResponse<List<InboundPollResponse>> RetrieveSMSResponsesWithHttpInfo ();
        /// <summary>
        /// Send MMS
        /// </summary>
        /// <remarks>
        /// Send MMS
        /// </remarks>
        /// <exception cref="com.telstra.messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A JSON or XML payload containing the recipient&#39;s phone number and MMS message.The recipient number should be in the format &#39;04xxxxxxxx&#39; where x is a digit</param>
        /// <returns>Object</returns>
        Object SendMMS (SendMmsRequest body);

        /// <summary>
        /// Send MMS
        /// </summary>
        /// <remarks>
        /// Send MMS
        /// </remarks>
        /// <exception cref="com.telstra.messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A JSON or XML payload containing the recipient&#39;s phone number and MMS message.The recipient number should be in the format &#39;04xxxxxxxx&#39; where x is a digit</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> SendMMSWithHttpInfo (SendMmsRequest body);
        /// <summary>
        /// Send SMS
        /// </summary>
        /// <remarks>
        /// Send Message
        /// </remarks>
        /// <exception cref="com.telstra.messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload">A JSON or XML payload containing the recipient&#39;s phone number and text message. The recipient number should be in the format &#39;04xxxxxxxx&#39; where x is a digit</param>
        /// <returns>MessageSentResponse</returns>
        MessageSentResponse SendSMS (SendSMSRequest payload);

        /// <summary>
        /// Send SMS
        /// </summary>
        /// <remarks>
        /// Send Message
        /// </remarks>
        /// <exception cref="com.telstra.messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload">A JSON or XML payload containing the recipient&#39;s phone number and text message. The recipient number should be in the format &#39;04xxxxxxxx&#39; where x is a digit</param>
        /// <returns>ApiResponse of MessageSentResponse</returns>
        ApiResponse<MessageSentResponse> SendSMSWithHttpInfo (SendSMSRequest payload);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get MMS Status
        /// </summary>
        /// <remarks>
        /// Get MMS Status
        /// </remarks>
        /// <exception cref="com.telstra.messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageid">Unique identifier of a message - it is the value returned from a previous POST call to https://api.telstra.com/v2/messages/mms</param>
        /// <returns>Task of OutboundPollResponse</returns>
        System.Threading.Tasks.Task<OutboundPollResponse> GetMMSStatusAsync (string messageid);

        /// <summary>
        /// Get MMS Status
        /// </summary>
        /// <remarks>
        /// Get MMS Status
        /// </remarks>
        /// <exception cref="com.telstra.messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageid">Unique identifier of a message - it is the value returned from a previous POST call to https://api.telstra.com/v2/messages/mms</param>
        /// <returns>Task of ApiResponse (OutboundPollResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutboundPollResponse>> GetMMSStatusAsyncWithHttpInfo (string messageid);
        /// <summary>
        /// Get SMS Status
        /// </summary>
        /// <remarks>
        /// Get Message Status
        /// </remarks>
        /// <exception cref="com.telstra.messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Unique identifier of a message - it is the value returned from a previous POST call to https://api.telstra.com/v2/messages/sms</param>
        /// <returns>Task of OutboundPollResponse</returns>
        System.Threading.Tasks.Task<OutboundPollResponse> GetSMSStatusAsync (string messageId);

        /// <summary>
        /// Get SMS Status
        /// </summary>
        /// <remarks>
        /// Get Message Status
        /// </remarks>
        /// <exception cref="com.telstra.messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Unique identifier of a message - it is the value returned from a previous POST call to https://api.telstra.com/v2/messages/sms</param>
        /// <returns>Task of ApiResponse (OutboundPollResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutboundPollResponse>> GetSMSStatusAsyncWithHttpInfo (string messageId);
        /// <summary>
        /// Retrieve SMS Responses
        /// </summary>
        /// <remarks>
        /// Retrieve Messages
        /// </remarks>
        /// <exception cref="com.telstra.messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;InboundPollResponse&gt;</returns>
        System.Threading.Tasks.Task<List<InboundPollResponse>> RetrieveSMSResponsesAsync ();

        /// <summary>
        /// Retrieve SMS Responses
        /// </summary>
        /// <remarks>
        /// Retrieve Messages
        /// </remarks>
        /// <exception cref="com.telstra.messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;InboundPollResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InboundPollResponse>>> RetrieveSMSResponsesAsyncWithHttpInfo ();
        /// <summary>
        /// Send MMS
        /// </summary>
        /// <remarks>
        /// Send MMS
        /// </remarks>
        /// <exception cref="com.telstra.messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A JSON or XML payload containing the recipient&#39;s phone number and MMS message.The recipient number should be in the format &#39;04xxxxxxxx&#39; where x is a digit</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> SendMMSAsync (SendMmsRequest body);

        /// <summary>
        /// Send MMS
        /// </summary>
        /// <remarks>
        /// Send MMS
        /// </remarks>
        /// <exception cref="com.telstra.messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A JSON or XML payload containing the recipient&#39;s phone number and MMS message.The recipient number should be in the format &#39;04xxxxxxxx&#39; where x is a digit</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SendMMSAsyncWithHttpInfo (SendMmsRequest body);
        /// <summary>
        /// Send SMS
        /// </summary>
        /// <remarks>
        /// Send Message
        /// </remarks>
        /// <exception cref="com.telstra.messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload">A JSON or XML payload containing the recipient&#39;s phone number and text message. The recipient number should be in the format &#39;04xxxxxxxx&#39; where x is a digit</param>
        /// <returns>Task of MessageSentResponse</returns>
        System.Threading.Tasks.Task<MessageSentResponse> SendSMSAsync (SendSMSRequest payload);

        /// <summary>
        /// Send SMS
        /// </summary>
        /// <remarks>
        /// Send Message
        /// </remarks>
        /// <exception cref="com.telstra.messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload">A JSON or XML payload containing the recipient&#39;s phone number and text message. The recipient number should be in the format &#39;04xxxxxxxx&#39; where x is a digit</param>
        /// <returns>Task of ApiResponse (MessageSentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MessageSentResponse>> SendSMSAsyncWithHttpInfo (SendSMSRequest payload);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MessagingApi : IMessagingApi
    {
        private com.telstra.messaging.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MessagingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MessagingApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = com.telstra.messaging.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MessagingApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MessagingApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = com.telstra.messaging.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public com.telstra.messaging.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get MMS Status Get MMS Status
        /// </summary>
        /// <exception cref="com.telstra.messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageid">Unique identifier of a message - it is the value returned from a previous POST call to https://api.telstra.com/v2/messages/mms</param>
        /// <returns>OutboundPollResponse</returns>
        public OutboundPollResponse GetMMSStatus (string messageid)
        {
             ApiResponse<OutboundPollResponse> localVarResponse = GetMMSStatusWithHttpInfo(messageid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get MMS Status Get MMS Status
        /// </summary>
        /// <exception cref="com.telstra.messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageid">Unique identifier of a message - it is the value returned from a previous POST call to https://api.telstra.com/v2/messages/mms</param>
        /// <returns>ApiResponse of OutboundPollResponse</returns>
        public ApiResponse< OutboundPollResponse > GetMMSStatusWithHttpInfo (string messageid)
        {
            // verify the required parameter 'messageid' is set
            if (messageid == null)
                throw new ApiException(400, "Missing required parameter 'messageid' when calling MessagingApi->GetMMSStatus");

            var localVarPath = "/messages/mms/{messageid}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (messageid != null) localVarPathParams.Add("messageid", Configuration.ApiClient.ParameterToString(messageid)); // path parameter

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMMSStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutboundPollResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OutboundPollResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutboundPollResponse)));
        }

        /// <summary>
        /// Get MMS Status Get MMS Status
        /// </summary>
        /// <exception cref="com.telstra.messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageid">Unique identifier of a message - it is the value returned from a previous POST call to https://api.telstra.com/v2/messages/mms</param>
        /// <returns>Task of OutboundPollResponse</returns>
        public async System.Threading.Tasks.Task<OutboundPollResponse> GetMMSStatusAsync (string messageid)
        {
             ApiResponse<OutboundPollResponse> localVarResponse = await GetMMSStatusAsyncWithHttpInfo(messageid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get MMS Status Get MMS Status
        /// </summary>
        /// <exception cref="com.telstra.messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageid">Unique identifier of a message - it is the value returned from a previous POST call to https://api.telstra.com/v2/messages/mms</param>
        /// <returns>Task of ApiResponse (OutboundPollResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OutboundPollResponse>> GetMMSStatusAsyncWithHttpInfo (string messageid)
        {
            // verify the required parameter 'messageid' is set
            if (messageid == null)
                throw new ApiException(400, "Missing required parameter 'messageid' when calling MessagingApi->GetMMSStatus");

            var localVarPath = "/messages/mms/{messageid}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (messageid != null) localVarPathParams.Add("messageid", Configuration.ApiClient.ParameterToString(messageid)); // path parameter

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMMSStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutboundPollResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OutboundPollResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutboundPollResponse)));
        }

        /// <summary>
        /// Get SMS Status Get Message Status
        /// </summary>
        /// <exception cref="com.telstra.messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Unique identifier of a message - it is the value returned from a previous POST call to https://api.telstra.com/v2/messages/sms</param>
        /// <returns>OutboundPollResponse</returns>
        public OutboundPollResponse GetSMSStatus (string messageId)
        {
             ApiResponse<OutboundPollResponse> localVarResponse = GetSMSStatusWithHttpInfo(messageId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get SMS Status Get Message Status
        /// </summary>
        /// <exception cref="com.telstra.messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Unique identifier of a message - it is the value returned from a previous POST call to https://api.telstra.com/v2/messages/sms</param>
        /// <returns>ApiResponse of OutboundPollResponse</returns>
        public ApiResponse< OutboundPollResponse > GetSMSStatusWithHttpInfo (string messageId)
        {
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling MessagingApi->GetSMSStatus");

            var localVarPath = "/messages/sms/{messageId}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (messageId != null) localVarPathParams.Add("messageId", Configuration.ApiClient.ParameterToString(messageId)); // path parameter

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSMSStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutboundPollResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OutboundPollResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutboundPollResponse)));
        }

        /// <summary>
        /// Get SMS Status Get Message Status
        /// </summary>
        /// <exception cref="com.telstra.messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Unique identifier of a message - it is the value returned from a previous POST call to https://api.telstra.com/v2/messages/sms</param>
        /// <returns>Task of OutboundPollResponse</returns>
        public async System.Threading.Tasks.Task<OutboundPollResponse> GetSMSStatusAsync (string messageId)
        {
             ApiResponse<OutboundPollResponse> localVarResponse = await GetSMSStatusAsyncWithHttpInfo(messageId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get SMS Status Get Message Status
        /// </summary>
        /// <exception cref="com.telstra.messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Unique identifier of a message - it is the value returned from a previous POST call to https://api.telstra.com/v2/messages/sms</param>
        /// <returns>Task of ApiResponse (OutboundPollResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OutboundPollResponse>> GetSMSStatusAsyncWithHttpInfo (string messageId)
        {
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling MessagingApi->GetSMSStatus");

            var localVarPath = "/messages/sms/{messageId}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (messageId != null) localVarPathParams.Add("messageId", Configuration.ApiClient.ParameterToString(messageId)); // path parameter

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSMSStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutboundPollResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OutboundPollResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutboundPollResponse)));
        }

        /// <summary>
        /// Retrieve SMS Responses Retrieve Messages
        /// </summary>
        /// <exception cref="com.telstra.messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;InboundPollResponse&gt;</returns>
        public List<InboundPollResponse> RetrieveSMSResponses ()
        {
             ApiResponse<List<InboundPollResponse>> localVarResponse = RetrieveSMSResponsesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve SMS Responses Retrieve Messages
        /// </summary>
        /// <exception cref="com.telstra.messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;InboundPollResponse&gt;</returns>
        public ApiResponse< List<InboundPollResponse> > RetrieveSMSResponsesWithHttpInfo ()
        {

            var localVarPath = "/messages/sms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrieveSMSResponses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InboundPollResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<InboundPollResponse>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InboundPollResponse>)));
        }

        /// <summary>
        /// Retrieve SMS Responses Retrieve Messages
        /// </summary>
        /// <exception cref="com.telstra.messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;InboundPollResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<InboundPollResponse>> RetrieveSMSResponsesAsync ()
        {
             ApiResponse<List<InboundPollResponse>> localVarResponse = await RetrieveSMSResponsesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve SMS Responses Retrieve Messages
        /// </summary>
        /// <exception cref="com.telstra.messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;InboundPollResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InboundPollResponse>>> RetrieveSMSResponsesAsyncWithHttpInfo ()
        {

            var localVarPath = "/messages/sms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrieveSMSResponses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InboundPollResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<InboundPollResponse>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InboundPollResponse>)));
        }

        /// <summary>
        /// Send MMS Send MMS
        /// </summary>
        /// <exception cref="com.telstra.messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A JSON or XML payload containing the recipient&#39;s phone number and MMS message.The recipient number should be in the format &#39;04xxxxxxxx&#39; where x is a digit</param>
        /// <returns>Object</returns>
        public Object SendMMS (SendMmsRequest body)
        {
             ApiResponse<Object> localVarResponse = SendMMSWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send MMS Send MMS
        /// </summary>
        /// <exception cref="com.telstra.messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A JSON or XML payload containing the recipient&#39;s phone number and MMS message.The recipient number should be in the format &#39;04xxxxxxxx&#39; where x is a digit</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > SendMMSWithHttpInfo (SendMmsRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling MessagingApi->SendMMS");

            var localVarPath = "/messages/mms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendMMS", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Send MMS Send MMS
        /// </summary>
        /// <exception cref="com.telstra.messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A JSON or XML payload containing the recipient&#39;s phone number and MMS message.The recipient number should be in the format &#39;04xxxxxxxx&#39; where x is a digit</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> SendMMSAsync (SendMmsRequest body)
        {
             ApiResponse<Object> localVarResponse = await SendMMSAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send MMS Send MMS
        /// </summary>
        /// <exception cref="com.telstra.messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A JSON or XML payload containing the recipient&#39;s phone number and MMS message.The recipient number should be in the format &#39;04xxxxxxxx&#39; where x is a digit</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SendMMSAsyncWithHttpInfo (SendMmsRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling MessagingApi->SendMMS");

            var localVarPath = "/messages/mms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendMMS", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Send SMS Send Message
        /// </summary>
        /// <exception cref="com.telstra.messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload">A JSON or XML payload containing the recipient&#39;s phone number and text message. The recipient number should be in the format &#39;04xxxxxxxx&#39; where x is a digit</param>
        /// <returns>MessageSentResponse</returns>
        public MessageSentResponse SendSMS (SendSMSRequest payload)
        {
             ApiResponse<MessageSentResponse> localVarResponse = SendSMSWithHttpInfo(payload);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send SMS Send Message
        /// </summary>
        /// <exception cref="com.telstra.messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload">A JSON or XML payload containing the recipient&#39;s phone number and text message. The recipient number should be in the format &#39;04xxxxxxxx&#39; where x is a digit</param>
        /// <returns>ApiResponse of MessageSentResponse</returns>
        public ApiResponse< MessageSentResponse > SendSMSWithHttpInfo (SendSMSRequest payload)
        {
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new ApiException(400, "Missing required parameter 'payload' when calling MessagingApi->SendSMS");

            var localVarPath = "/messages/sms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendSMS", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessageSentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MessageSentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessageSentResponse)));
        }

        /// <summary>
        /// Send SMS Send Message
        /// </summary>
        /// <exception cref="com.telstra.messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload">A JSON or XML payload containing the recipient&#39;s phone number and text message. The recipient number should be in the format &#39;04xxxxxxxx&#39; where x is a digit</param>
        /// <returns>Task of MessageSentResponse</returns>
        public async System.Threading.Tasks.Task<MessageSentResponse> SendSMSAsync (SendSMSRequest payload)
        {
             ApiResponse<MessageSentResponse> localVarResponse = await SendSMSAsyncWithHttpInfo(payload);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send SMS Send Message
        /// </summary>
        /// <exception cref="com.telstra.messaging.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload">A JSON or XML payload containing the recipient&#39;s phone number and text message. The recipient number should be in the format &#39;04xxxxxxxx&#39; where x is a digit</param>
        /// <returns>Task of ApiResponse (MessageSentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MessageSentResponse>> SendSMSAsyncWithHttpInfo (SendSMSRequest payload)
        {
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new ApiException(400, "Missing required parameter 'payload' when calling MessagingApi->SendSMS");

            var localVarPath = "/messages/sms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }

            // authentication (auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendSMS", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessageSentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MessageSentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessageSentResponse)));
        }

    }
}
