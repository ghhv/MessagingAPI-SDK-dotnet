/* 
 * Telstra Messaging API
 *
 *  The Telstra SMS Messaging API allows your applications to send and receive SMS text messages from Australia's leading network operator.  It also allows your application to track the delivery status of both sent and received SMS messages. 
 *
 * OpenAPI spec version: 2.2.4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.telstra.messaging.Client.SwaggerDateConverter;

namespace com.telstra.messaging.Model
{
    /// <summary>
    /// Poll for incoming messages returning the latest. Only works if no callback url was specified when provisioning a number.
    /// </summary>
    [DataContract]
    public partial class InboundPollResponse :  IEquatable<InboundPollResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InboundPollResponse" /> class.
        /// </summary>
        /// <param name="To">The phone number (recipient) that the message was sent to(in E.164 format)..</param>
        /// <param name="From">The phone number (sender) that the message was sent from (in E.164 format)..</param>
        /// <param name="Body">Text body of the message that was sent.</param>
        /// <param name="ReceivedTimestamp">The date and time when the message was recieved by recipient..</param>
        /// <param name="MoreMessages">Indicates if there are more messages that can be polled from the server. 0&#x3D;No more messages available. Anything else indicates there are more messages on the server..</param>
        /// <param name="MessageId">Optional message ID of the SMS you sent. Use this ID to view the message status or get responses..</param>
        public InboundPollResponse(string To = default(string), string From = default(string), string Body = default(string), string ReceivedTimestamp = default(string), int? MoreMessages = default(int?), string MessageId = default(string))
        {
            this.To = To;
            this.From = From;
            this.Body = Body;
            this.ReceivedTimestamp = ReceivedTimestamp;
            this.MoreMessages = MoreMessages;
            this.MessageId = MessageId;
        }
        
        /// <summary>
        /// The phone number (recipient) that the message was sent to(in E.164 format).
        /// </summary>
        /// <value>The phone number (recipient) that the message was sent to(in E.164 format).</value>
        [DataMember(Name="to", EmitDefaultValue=false)]
        public string To { get; set; }

        /// <summary>
        /// The phone number (sender) that the message was sent from (in E.164 format).
        /// </summary>
        /// <value>The phone number (sender) that the message was sent from (in E.164 format).</value>
        [DataMember(Name="from", EmitDefaultValue=false)]
        public string From { get; set; }

        /// <summary>
        /// Text body of the message that was sent
        /// </summary>
        /// <value>Text body of the message that was sent</value>
        [DataMember(Name="body", EmitDefaultValue=false)]
        public string Body { get; set; }

        /// <summary>
        /// The date and time when the message was recieved by recipient.
        /// </summary>
        /// <value>The date and time when the message was recieved by recipient.</value>
        [DataMember(Name="receivedTimestamp", EmitDefaultValue=false)]
        public string ReceivedTimestamp { get; set; }

        /// <summary>
        /// Indicates if there are more messages that can be polled from the server. 0&#x3D;No more messages available. Anything else indicates there are more messages on the server.
        /// </summary>
        /// <value>Indicates if there are more messages that can be polled from the server. 0&#x3D;No more messages available. Anything else indicates there are more messages on the server.</value>
        [DataMember(Name="moreMessages", EmitDefaultValue=false)]
        public int? MoreMessages { get; set; }

        /// <summary>
        /// Optional message ID of the SMS you sent. Use this ID to view the message status or get responses.
        /// </summary>
        /// <value>Optional message ID of the SMS you sent. Use this ID to view the message status or get responses.</value>
        [DataMember(Name="messageId", EmitDefaultValue=false)]
        public string MessageId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InboundPollResponse {\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  ReceivedTimestamp: ").Append(ReceivedTimestamp).Append("\n");
            sb.Append("  MoreMessages: ").Append(MoreMessages).Append("\n");
            sb.Append("  MessageId: ").Append(MessageId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InboundPollResponse);
        }

        /// <summary>
        /// Returns true if InboundPollResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of InboundPollResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InboundPollResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.To == input.To ||
                    (this.To != null &&
                    this.To.Equals(input.To))
                ) && 
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) && 
                (
                    this.Body == input.Body ||
                    (this.Body != null &&
                    this.Body.Equals(input.Body))
                ) && 
                (
                    this.ReceivedTimestamp == input.ReceivedTimestamp ||
                    (this.ReceivedTimestamp != null &&
                    this.ReceivedTimestamp.Equals(input.ReceivedTimestamp))
                ) && 
                (
                    this.MoreMessages == input.MoreMessages ||
                    (this.MoreMessages != null &&
                    this.MoreMessages.Equals(input.MoreMessages))
                ) && 
                (
                    this.MessageId == input.MessageId ||
                    (this.MessageId != null &&
                    this.MessageId.Equals(input.MessageId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.To != null)
                    hashCode = hashCode * 59 + this.To.GetHashCode();
                if (this.From != null)
                    hashCode = hashCode * 59 + this.From.GetHashCode();
                if (this.Body != null)
                    hashCode = hashCode * 59 + this.Body.GetHashCode();
                if (this.ReceivedTimestamp != null)
                    hashCode = hashCode * 59 + this.ReceivedTimestamp.GetHashCode();
                if (this.MoreMessages != null)
                    hashCode = hashCode * 59 + this.MoreMessages.GetHashCode();
                if (this.MessageId != null)
                    hashCode = hashCode * 59 + this.MessageId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
