/* 
 * Telstra Messaging API
 *
 *  The Telstra SMS Messaging API allows your applications to send and receive SMS text messages from Australia's leading network operator.  It also allows your application to track the delivery status of both sent and received SMS messages. 
 *
 * OpenAPI spec version: 2.2.4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.telstra.messaging.Client.SwaggerDateConverter;

namespace com.telstra.messaging.Model
{
    /// <summary>
    /// SendMmsRequestMMSContent
    /// </summary>
    [DataContract]
    public partial class SendMmsRequestMMSContent :  IEquatable<SendMmsRequestMMSContent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SendMmsRequestMMSContent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SendMmsRequestMMSContent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SendMmsRequestMMSContent" /> class.
        /// </summary>
        /// <param name="Type">The following types are supported audio/amr  audio/aac  audio/mp3  audio/mpeg3  audio/mpeg  audio/mpg  audio/wav  audio/3gpp  audio/mp4  image/gif  image/jpeg  image/jpg  image/png  image/bmp  video/mpeg4  video/mp4  video/mpeg  video/3gpp  video/3gp  video/h263  text/plain  text/x-vCard  text/x-vCalendar (required).</param>
        /// <param name="Filename">The file name to be associated with the content. Some devices will display this file name with a placeholder for the content. (required).</param>
        /// <param name="Payload">Payload (required).</param>
        public SendMmsRequestMMSContent(string Type = default(string), string Filename = default(string), string Payload = default(string))
        {
            // to ensure "Type" is required (not null)
            if (Type == null)
            {
                throw new InvalidDataException("Type is a required property for SendMmsRequestMMSContent and cannot be null");
            }
            else
            {
                this.Type = Type;
            }
            // to ensure "Filename" is required (not null)
            if (Filename == null)
            {
                throw new InvalidDataException("Filename is a required property for SendMmsRequestMMSContent and cannot be null");
            }
            else
            {
                this.Filename = Filename;
            }
            // to ensure "Payload" is required (not null)
            if (Payload == null)
            {
                throw new InvalidDataException("Payload is a required property for SendMmsRequestMMSContent and cannot be null");
            }
            else
            {
                this.Payload = Payload;
            }
        }
        
        /// <summary>
        /// The following types are supported audio/amr  audio/aac  audio/mp3  audio/mpeg3  audio/mpeg  audio/mpg  audio/wav  audio/3gpp  audio/mp4  image/gif  image/jpeg  image/jpg  image/png  image/bmp  video/mpeg4  video/mp4  video/mpeg  video/3gpp  video/3gp  video/h263  text/plain  text/x-vCard  text/x-vCalendar
        /// </summary>
        /// <value>The following types are supported audio/amr  audio/aac  audio/mp3  audio/mpeg3  audio/mpeg  audio/mpg  audio/wav  audio/3gpp  audio/mp4  image/gif  image/jpeg  image/jpg  image/png  image/bmp  video/mpeg4  video/mp4  video/mpeg  video/3gpp  video/3gp  video/h263  text/plain  text/x-vCard  text/x-vCalendar</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// The file name to be associated with the content. Some devices will display this file name with a placeholder for the content.
        /// </summary>
        /// <value>The file name to be associated with the content. Some devices will display this file name with a placeholder for the content.</value>
        [DataMember(Name="filename", EmitDefaultValue=false)]
        public string Filename { get; set; }

        /// <summary>
        /// Gets or Sets Payload
        /// </summary>
        [DataMember(Name="payload", EmitDefaultValue=false)]
        public string Payload { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SendMmsRequestMMSContent {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Filename: ").Append(Filename).Append("\n");
            sb.Append("  Payload: ").Append(Payload).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SendMmsRequestMMSContent);
        }

        /// <summary>
        /// Returns true if SendMmsRequestMMSContent instances are equal
        /// </summary>
        /// <param name="input">Instance of SendMmsRequestMMSContent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SendMmsRequestMMSContent input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Filename == input.Filename ||
                    (this.Filename != null &&
                    this.Filename.Equals(input.Filename))
                ) && 
                (
                    this.Payload == input.Payload ||
                    (this.Payload != null &&
                    this.Payload.Equals(input.Payload))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Filename != null)
                    hashCode = hashCode * 59 + this.Filename.GetHashCode();
                if (this.Payload != null)
                    hashCode = hashCode * 59 + this.Payload.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
