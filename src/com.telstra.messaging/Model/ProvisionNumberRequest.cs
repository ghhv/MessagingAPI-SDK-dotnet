/* 
 * Telstra Messaging API
 *
 *  The Telstra SMS Messaging API allows your applications to send and receive SMS text messages from Australia's leading network operator.  It also allows your application to track the delivery status of both sent and received SMS messages. 
 *
 * OpenAPI spec version: 2.2.4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.telstra.messaging.Client.SwaggerDateConverter;

namespace com.telstra.messaging.Model
{
    /// <summary>
    /// ProvisionNumberRequest
    /// </summary>
    [DataContract]
    public partial class ProvisionNumberRequest :  IEquatable<ProvisionNumberRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProvisionNumberRequest" /> class.
        /// </summary>
        /// <param name="ActiveDays">ActiveDays.</param>
        /// <param name="NotifyURL">NotifyURL.</param>
        public ProvisionNumberRequest(int? ActiveDays = default(int?), string NotifyURL = default(string))
        {
            this.ActiveDays = ActiveDays;
            this.NotifyURL = NotifyURL;
        }
        
        /// <summary>
        /// Gets or Sets ActiveDays
        /// </summary>
        [DataMember(Name="activeDays", EmitDefaultValue=false)]
        public int? ActiveDays { get; set; }

        /// <summary>
        /// Gets or Sets NotifyURL
        /// </summary>
        [DataMember(Name="notifyURL", EmitDefaultValue=false)]
        public string NotifyURL { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProvisionNumberRequest {\n");
            sb.Append("  ActiveDays: ").Append(ActiveDays).Append("\n");
            sb.Append("  NotifyURL: ").Append(NotifyURL).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProvisionNumberRequest);
        }

        /// <summary>
        /// Returns true if ProvisionNumberRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ProvisionNumberRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProvisionNumberRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ActiveDays == input.ActiveDays ||
                    (this.ActiveDays != null &&
                    this.ActiveDays.Equals(input.ActiveDays))
                ) && 
                (
                    this.NotifyURL == input.NotifyURL ||
                    (this.NotifyURL != null &&
                    this.NotifyURL.Equals(input.NotifyURL))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActiveDays != null)
                    hashCode = hashCode * 59 + this.ActiveDays.GetHashCode();
                if (this.NotifyURL != null)
                    hashCode = hashCode * 59 + this.NotifyURL.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
